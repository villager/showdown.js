{
  "version": 3,
  "sources": ["../../../src/client/index.ts"],
  "sourcesContent": ["\r\n\r\nimport { BaseClient } from \"./base\";\r\nimport { SocketManager } from \"./socket\";\r\nimport {UserManager, RoomManager, FormatsManager, LoginManager} from '../managers';\r\n\r\ninterface ReconnectType {\r\n\ttime: number;\r\n\tattemps: number;\r\n}\r\nexport class Client extends BaseClient {\r\n\t/**\r\n\t * Our core client\r\n\t * @constructor\r\n\t * @param {AnyObject} options\r\n\t */\r\n\tsocket: SocketManager;\r\n\tusers: UserManager;\r\n\trooms: RoomManager;\r\n\tformats: FormatsManager;\r\n\t_login: LoginManager;\r\n\treconnect: ReconnectType|null;\r\n\tconstructor(options: AnyObject) {\r\n\t\tsuper(options);\r\n\t\t/** @type {SocketManager} **/\r\n\t\tthis.socket = new SocketManager(this);\r\n\r\n\t\t/** @type {UserManager} **/\r\n\t\tthis.users = new UserManager(this);\r\n\r\n\t\t/** @type {RoomManager} **/\r\n\t\tthis.rooms = new RoomManager(this);\r\n\r\n\t\t/** @type {FormatsManager} */\r\n\t\tthis.formats = new FormatsManager();\r\n\t\t\r\n\t\t/** @type {LoginManager} **/\r\n\t\tthis._login = new LoginManager(this);\r\n\r\n\t\tthis.on('disconnect', err => {\r\n\t\t\tconsole.log('Bot Disconnected from ' + this.host + (err ? ' | ' + err.code + ': ' + err.message : ''));\r\n\t\t\tif (this.socket.connection.closed || this.socket.connection.connecting || this.socket.connection.status.connected)\r\n\t\t\t\treturn;\r\n\t\t\tthis.socket.reconnect();\r\n\t\t});\r\n\t\tthis.reconnect = options.reconnect ?? null;\r\n\t}\r\n\r\n\tsend(data: string|string[], room?: string) {\r\n\t\tthis.socket.send(data, room);\r\n\t}\r\n\r\n\tconnect() {\r\n\t\treturn this.socket.on();\r\n\t}\r\n\t/**\r\n\t * Log into the server\r\n\t * @param {string} name\r\n\t * @param {string?} pass\r\n\t */\r\n\tlogin(name: string, pass: string) {\r\n\t\tthis._login.login(name, pass);\r\n\t}\r\n\t/**\r\n\t * Event of parseLine, use callback as a function () => {}\r\n\t * @param {Function} callback\r\n\t */\r\n\tparseLine(callback: any) {\r\n\t\tthis.on('parseLine', callback);\r\n\t}\r\n\t/**\r\n\t * Validations of data\r\n\t */\r\n\t$validation() {}\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,kBAA2B;AAC3B,oBAA8B;AAC9B,sBAAqE;AAM9D,MAAM,eAAe,uBAAW;AAAA,EAYtC,YAAY,SAAoB;AAC/B,UAAM,OAAO;AAEb,SAAK,SAAS,IAAI,4BAAc,IAAI;AAGpC,SAAK,QAAQ,IAAI,4BAAY,IAAI;AAGjC,SAAK,QAAQ,IAAI,4BAAY,IAAI;AAGjC,SAAK,UAAU,IAAI,+BAAe;AAGlC,SAAK,SAAS,IAAI,6BAAa,IAAI;AAEnC,SAAK,GAAG,cAAc,SAAO;AAC5B,cAAQ,IAAI,2BAA2B,KAAK,QAAQ,MAAM,QAAQ,IAAI,OAAO,OAAO,IAAI,UAAU,GAAG;AACrG,UAAI,KAAK,OAAO,WAAW,UAAU,KAAK,OAAO,WAAW,cAAc,KAAK,OAAO,WAAW,OAAO;AACvG;AACD,WAAK,OAAO,UAAU;AAAA,IACvB,CAAC;AACD,SAAK,YAAY,QAAQ,aAAa;AAAA,EACvC;AAAA,EAEA,KAAK,MAAuB,MAAe;AAC1C,SAAK,OAAO,KAAK,MAAM,IAAI;AAAA,EAC5B;AAAA,EAEA,UAAU;AACT,WAAO,KAAK,OAAO,GAAG;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,MAAc,MAAc;AACjC,SAAK,OAAO,MAAM,MAAM,IAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,UAAe;AACxB,SAAK,GAAG,aAAa,QAAQ;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc;AAAA,EAAC;AAChB;",
  "names": []
}
