{
  "version": 3,
  "sources": ["../../../src/structures/rooms.ts"],
  "sourcesContent": ["'use strict';\r\n\r\nimport { BaseUser } from \"./base\";\r\n\r\nexport class Room extends BaseUser {\r\n    users: Set<string>\r\n    modchat: null|string;\r\n    modjoin: null|string;\r\n    visibility: null|string;\r\n    type: string;\r\n    auth: Map<string, Set<string>>\r\n    subRooms: null|Set<string>\r\n\tconstructor(data: AnyObject, client: Client) {\r\n        super(client);\r\n\t\t/** @type {string} */\r\n\t\tthis.name = '';\r\n\r\n\t\t/** @type {Set|null} */\r\n\t\tthis.users = new Set();\r\n\r\n\t\t/** @type {Set|null} */\r\n\t\tthis.subRooms = new Set();\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.type = ' ';\r\n\r\n\t\t/** @type {string|null} */\r\n\t\tthis.modjoin = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.modchat = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.visibility = data.visibility ?? 'hidden';\r\n\r\n\t\t/** @type {Map<string, Set>|null} */\r\n\t\tthis.auth = new Map();\r\n\t\tthis.update(data);\r\n\t}\r\n\r\n\tget userCount() {\r\n\t\tif (!this.users) return 0;\r\n\t\treturn this.users.size;\r\n\t}\r\n\r\n\tupdate(data: AnyObject) {\r\n\t\tif (data.language) this.language = data.language;\r\n\t\tif (data.name) this.name = data.name;\r\n\t\tif (data.modchat) this.modchat = data.modchat;\r\n\t\tif (data.modjoin) this.modjoin = data.modjoin;\r\n\t\tif (data.visibility) this.visibility = data.visibility;\r\n\t\tif (data.users) this.updateUsers(data.users);\r\n\t\tif (data.auth) this.updateAuth(data.auth);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Set} arr\r\n\t * @returns {void}\r\n\t */\r\n\tupdateUsers(data: any): void {\r\n\t\tfor (const user of data) {\r\n\t\t\tif (!user) continue;\r\n\t\t\tif (!this.users.has(user)) this.users.add(user.slice(1));\r\n\t\t}\r\n\t}\r\n\tsend(data: string) {\r\n\t\tsuper.send(data, this.id as ID);\r\n\t}\r\n\t/**\r\n\t *\r\n\t * @param {Map<string, Set>} auth\r\n\t */\r\n\tupdateAuth(data: AnyObject) {\r\n\t\tfor (let i in data) {\r\n\t\t\tif (!this.auth.has(i)) {\r\n\t\t\t\tthis.auth.set(i, new Set());\r\n\t\t\t}\r\n\t\t\tfor (const user of data[i]) {\r\n\t\t\t\tif (!this.auth.get(i)?.has(user)) {\r\n\t\t\t\t\tthis.auth.get(i)?.add(user);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,kBAAyB;AAElB,MAAM,aAAa,qBAAS;AAAA,EAQlC,YAAY,MAAiB,QAAgB;AACtC,UAAM,MAAM;AAElB,SAAK,OAAO;AAGZ,SAAK,QAAQ,oBAAI,IAAI;AAGrB,SAAK,WAAW,oBAAI,IAAI;AAGxB,SAAK,OAAO;AAGZ,SAAK,UAAU;AAGf,SAAK,UAAU;AAGf,SAAK,aAAa,KAAK,cAAc;AAGrC,SAAK,OAAO,oBAAI,IAAI;AACpB,SAAK,OAAO,IAAI;AAAA,EACjB;AAAA,EAEA,IAAI,YAAY;AACf,QAAI,CAAC,KAAK;AAAO,aAAO;AACxB,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EAEA,OAAO,MAAiB;AACvB,QAAI,KAAK;AAAU,WAAK,WAAW,KAAK;AACxC,QAAI,KAAK;AAAM,WAAK,OAAO,KAAK;AAChC,QAAI,KAAK;AAAS,WAAK,UAAU,KAAK;AACtC,QAAI,KAAK;AAAS,WAAK,UAAU,KAAK;AACtC,QAAI,KAAK;AAAY,WAAK,aAAa,KAAK;AAC5C,QAAI,KAAK;AAAO,WAAK,YAAY,KAAK,KAAK;AAC3C,QAAI,KAAK;AAAM,WAAK,WAAW,KAAK,IAAI;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,MAAiB;AAC5B,eAAW,QAAQ,MAAM;AACxB,UAAI,CAAC;AAAM;AACX,UAAI,CAAC,KAAK,MAAM,IAAI,IAAI;AAAG,aAAK,MAAM,IAAI,KAAK,MAAM,CAAC,CAAC;AAAA,IACxD;AAAA,EACD;AAAA,EACA,KAAK,MAAc;AAClB,UAAM,KAAK,MAAM,KAAK,EAAQ;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,MAAiB;AAC3B,aAAS,KAAK,MAAM;AACnB,UAAI,CAAC,KAAK,KAAK,IAAI,CAAC,GAAG;AACtB,aAAK,KAAK,IAAI,GAAG,oBAAI,IAAI,CAAC;AAAA,MAC3B;AACA,iBAAW,QAAQ,KAAK,CAAC,GAAG;AAC3B,YAAI,CAAC,KAAK,KAAK,IAAI,CAAC,GAAG,IAAI,IAAI,GAAG;AACjC,eAAK,KAAK,IAAI,CAAC,GAAG,IAAI,IAAI;AAAA,QAC3B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
